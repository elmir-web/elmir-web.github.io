{"version":3,"sources":["components/site-capgag/Site-CapGag.jsx","components/my-films/My-Films.jsx","components/App.jsx","index.js"],"names":["SiteCapGag","className","MyFilms","React","useState","myFilmsPack","setMyFilmsPack","useEffect","reqKinopoiskFilm","i","tempNameFilm","dataMyFilms","name_russian","tempYearFilm","year","length","Promise","resolve","reject","setTimeout","a","fetch","queryFetch","ok","status","json","queryJSON","data","then","result","map","itemReqFilm","reqNameFilm","reqYearFilm","push","state","catch","errResponse","console","log","item","src","big_poster","alt","country_ru","description","slogan","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6nMAUeA,MARf,WACE,OACE,qBAAKC,UAAU,aAAf,+R,qDCiHWC,MA/Gf,WACE,MAAsCC,IAAMC,SAAS,IAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAmFA,OAhFAH,IAAMI,WAAU,WAKd,IAHA,IAAIC,EAAmB,GAFH,WAKXC,GAEP,IAAIC,EAAeC,EAAYF,GAAGG,aAC9BC,EAAeF,EAAYF,GAAGK,KAG9BL,EAAI,IAAME,EAAYI,OAIxB,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,WAAU,sBAAC,8BAAAC,EAAA,sEACcC,MAAM,8CAAD,OACoBX,IAFvC,WACLY,EADK,QAMOC,GANP,gBAOPL,EAAO,qIAAD,OAA6BI,EAAWE,SAPvC,uCASeF,EAAWG,OAT1B,OASHC,EATG,OAWPT,EAAQS,EAAUC,MAXX,4CAaR,QAIFC,MAAK,SAACC,GAILA,EAAOC,KAAI,SAAUC,GACnB,IAAIC,EAAcD,EAAYnB,aAC1BqB,EAAcF,EAAYjB,KAI5BJ,IAAiBsB,GACjBnB,IAAiBoB,IASjBzB,EAAiB0B,KAAKH,GACtBzB,GAAe,SAAC6B,GAAD,4BAAeA,GAAf,CAAsB3B,cAW1C4B,OAAM,SAACC,GAENC,QAAQC,IAAIF,MAGhBC,QAAQC,IAAR,6BAAmB9B,EAAI,KAlElBA,EAAI,EAAGA,EAAIE,EAAYI,OAAQN,IAAM,EAArCA,KAqER,IAEHJ,EAAYyB,KAAI,SAAUU,GACxBF,QAAQC,IAAIC,MAIZ,sBAAKvC,UAAU,UAAf,UACE,oIAEA,uBACCI,EAAYyB,KAAI,SAAUU,GACzB,OACE,gCACE,6BAAKA,EAAK5B,eACV,qBAAK6B,IAAKD,EAAKE,WAAYC,IAAI,KAC/B,uEACWH,EAAKI,WACd,uBAFF,qDAGaJ,EAAKK,YAChB,uBAJF,yCAKWL,EAAKM,OACd,uBANF,uBAOQN,EAAK1B,QAEb,iCChGGiC,MATf,WACE,OACE,sBAAK9C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCDN+C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.118ada01.chunk.js","sourcesContent":["import \"./Site-CapGag.scss\";\r\n\r\nfunction SiteCapGag() {\r\n  return (\r\n    <div className=\"SiteCapGag\">\r\n      Пока сайт на реконструкции, посмотрите контент ниже:\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SiteCapGag;\r\n","import React from \"react\"; // импортируем React\r\n\r\nimport \"./My-Films.scss\"; // импортируем стили компонента\r\nimport dataMyFilms from \"./../../DATAS/MyFilms.json\"; // импортируем наш массив с названиями и годами фильмов\r\n\r\n// главная функция компонента\r\nfunction MyFilms() {\r\n  const [myFilmsPack, setMyFilmsPack] = React.useState([]);\r\n\r\n  // данный useEffect сработает при монтировании компонента всего лишь один раз\r\n  React.useEffect(() => {\r\n    // let testIndex = 0; // TODO: НАВЕРНОЕ ВРЕМЕННО\r\n    let reqKinopoiskFilm = []; // массив для найденных одинаковых фильмов из нашего массива и запроса\r\n\r\n    // бегаем по нашему массиву с названиями и годами фильмов\r\n    for (let i = 0; i < dataMyFilms.length; i++) {\r\n      // запишем во временные переменные название и год фильма на текущей итерации из соответствующего объекта в массиве\r\n      let tempNameFilm = dataMyFilms[i].name_russian;\r\n      let tempYearFilm = dataMyFilms[i].year;\r\n\r\n      // все фильмы кроме последнего в массиве\r\n      if (i + 1 !== dataMyFilms.length) {\r\n        // console.log(i + 1); // выводим текущий номер итерации\r\n\r\n        // создаем обещание, чтобы ждало\r\n        new Promise((resolve, reject) => {\r\n          // сделаем между запросами дистанцию\r\n          setTimeout(async () => {\r\n            let queryFetch = await fetch(\r\n              `https://kinobd.ru/api/films/search/title?q=${tempNameFilm}`\r\n            ); // отправим запрос на наше апи с названием из нашего массива и запишем ответ\r\n\r\n            // если произошла ошибка\r\n            if (!queryFetch.ok) {\r\n              reject(`Ошибка ответа на запрос №${queryFetch.status}`); // зареджектим наш промис\r\n            } /* если все хорошо и ответ пришел*/ else {\r\n              let queryJSON = await queryFetch.json(); // запишем ответ в нашу временную переменную\r\n\r\n              resolve(queryJSON.data);\r\n            }\r\n          }, 1000);\r\n        })\r\n          // если все хорошо и промис зарезолвился\r\n          // eslint-disable-next-line no-loop-func\r\n          .then((result) => {\r\n            // console.log(\"все хорошо\");\r\n\r\n            // бегаем по полученному массиву для каждого из фильмов\r\n            result.map(function (itemReqFilm) {\r\n              let reqNameFilm = itemReqFilm.name_russian; // из полученного массива для каждого из фильмов сохраняем во временную переменную название фильма\r\n              let reqYearFilm = itemReqFilm.year; // и год тоже\r\n\r\n              // условие если название и год фильма из нашего массива схожи с названием и годом фильма из полученного массива\r\n              if (\r\n                tempNameFilm === reqNameFilm &&\r\n                tempYearFilm === reqYearFilm\r\n              ) {\r\n                /* то */\r\n                // testIndex++;\r\n\r\n                // console.log(`_______ | ${testIndex} ______`);\r\n                // console.log(reqNameFilm, reqYearFilm);\r\n                // console.log(\"_____________\");\r\n\r\n                reqKinopoiskFilm.push(itemReqFilm);\r\n                setMyFilmsPack((state) => [...state, reqKinopoiskFilm]);\r\n              }\r\n\r\n              /*else {\r\n              }*/\r\n            });\r\n\r\n            // setMyFilmsPack(reqKinopoiskFilm);\r\n            // setMyFilmsPack((state) => [...state, reqKinopoiskFilm]);\r\n          })\r\n          // отловим нашу ошибку\r\n          .catch((errResponse) => {\r\n            // выведем ошибку в консоль если промис зареджектился\r\n            console.log(errResponse);\r\n          });\r\n      } /* последний фильм в массиве */ else {\r\n        console.log(`все ${i + 1}`);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  myFilmsPack.map(function (item) {\r\n    console.log(item);\r\n  });\r\n\r\n  return (\r\n    <div className=\"MyFilms\">\r\n      <h4>Мои любимые фильмы</h4>\r\n      {/* <pre>{JSON.stringify(dataMyFilms, null, 2)}</pre> */}\r\n      <br />\r\n      {myFilmsPack.map(function (item) {\r\n        return (\r\n          <div>\r\n            <h1>{item.name_russian}</h1>\r\n            <img src={item.big_poster} alt=\"\" />\r\n            <p>\r\n              Страна: {item.country_ru}\r\n              <br />\r\n              Описание: {item.description}\r\n              <br />\r\n              Слоган: {item.slogan}\r\n              <br />\r\n              Год: {item.year}\r\n            </p>\r\n            <hr />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyFilms; // экспортируем компонент\r\n","import \"./App.scss\";\r\nimport SiteCapGag from \"./site-capgag/Site-CapGag\";\r\nimport MyFilms from \"./my-films/My-Films\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SiteCapGag />\r\n      <MyFilms />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.scss\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}